from search import *
from utils import *
class Couple(Problem):
    def __init__(self, initial, goal=("V","M" ,"F", "M" ,"F", "M" ,"F")):
        """ Define goal state and initialize a problem """
        super().__init__(initial, goal)

    def find_blank_square(self, state):
        """Return the index of the blank square in a given state"""
        return state.index('V')

    def actions(self, state):
        """ Return the actions that can be executed in the given state.
        The result would be a list, since there are only four possible actions
        in any given state of the environment """

        possible_actions = ['LEFT','LEFT_JUMP_ONE','LEFT_JUMP_TWO','RIGHT','RIGHT_JUMP_ONE','RIGHT_JUMP_TWO']
        index_blank_square = self.find_blank_square(state)
        if index_blank_square == 0:
            possible_actions.remove('LEFT')
            possible_actions.remove('LEFT_JUMP_ONE')
            possible_actions.remove('LEFT_JUMP_TWO')
        if index_blank_square == 1:
            possible_actions.remove('LEFT_JUMP_ONE')
            possible_actions.remove('LEFT_JUMP_TWO')
        if index_blank_square ==2:
            possible_actions.remove('LEFT_JUMP_TWO')
        if index_blank_square == 6:
            possible_actions.remove('RIGHT')
            possible_actions.remove('RIGHT_JUMP_ONE')
            possible_actions.remove('RIGHT_JUMP_TWO')
        if index_blank_square == 5:
            possible_actions.remove('RIGHT_JUMP_ONE')
            possible_actions.remove('RIGHT_JUMP_TWO')
        if index_blank_square == 4:
            possible_actions.remove('RIGHT_JUMP_TWO')

        if(len(possible_actions>2)):

        return possible_actions

    def result(self, state, action):
        """ Given state and action, return a new state that is the result of the action.
        Action is assumed to be a valid action in the state """

        # blank is the index of the blank square
        blank = self.find_blank_square(state)
        new_state = list(state)
        delta = {'RIGHT':1,'LEFT_JUMP_ONE':-2,'LEFT_JUMP_TWO':-3,'LEFT':-1,'RIGHT_JUMP_TWO':3,'RIGHT_JUMP_ONE':2}
        neighbor = blank + delta[action]
    
        new_state[blank], new_state[neighbor] = new_state[neighbor], new_state[blank]
    
        return tuple(new_state)
        
    def goal_test(self, state):
        """ Given a state, return True if state is a goal state or False, otherwise """

        return state == self.goal

    def h(self, node):
        """ Return the heuristic value for a given state. Default heuristic function used is 
        h(n) = number of misplaced tiles """

        return sum(s != g for (s, g) in zip(node.state, self.goal))

problem=Couple(("M","M","M","V","F","F","F"))
node=astar_search(problem)
print(node.path())
